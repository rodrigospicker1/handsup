<?php

namespace App\Models {

  /**
   * App\Models\Event
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $address
   * @property string|null $description
   * @property string $date_event
   * @property mixed $vacancies_available
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
   * @property-read int|null $users_count
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereVacanciesAvailable($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDateEvent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event query()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Event|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Event|null first(array|string $columns)
   * @method static Event firstOrFail(array|string $columns, string|null $message)
   * @method static Event sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Event extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $active
   * @property string|null $name_mother
   * @property string|null $siafi
   * @property string|null $ddd
   * @property string|null $ibge
   * @property string|null $state
   * @property string|null $city
   * @property string|null $district
   * @property string|null $address_complement
   * @property string|null $address_number
   * @property string|null $address
   * @property string|null $zip_code
   * @property mixed $country_id
   * @property string|null $username
   * @property string|null $company_code
   * @property string|null $gender
   * @property string|null $date_of_birth
   * @property string|null $whatsapp
   * @property string|null $cell_phone
   * @property string|null $phone
   * @property string|null $remember_token
   * @property string $password
   * @property string|null $cpf_formatted
   * @property string|null $cpf
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property bool $is_admin
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsAdmin($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCpf($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCpfFormatted($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCellPhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereWhatsapp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDateOfBirth($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereGender($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCompanyCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUsername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCountryId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereZipCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAddressNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAddressComplement($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDistrict($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereState($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIbge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDdd($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSiafi($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNameMother($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static User|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static User|null first(array|string $columns)
   * @method static User firstOrFail(array|string $columns, string|null $message)
   * @method static User sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

  /**
   * App\Models\UserEvent
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property mixed $event_id
   * @property mixed $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereEventId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent query()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static UserEvent|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent clone()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static UserEvent|null first(array|string $columns)
   * @method static UserEvent firstOrFail(array|string $columns, string|null $message)
   * @method static UserEvent sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<UserEvent>|UserEvent tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class UserEvent extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

}